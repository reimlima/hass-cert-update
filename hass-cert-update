#!/bin/bash

SCRIPTNAME=$(basename "$0")

#[ Functions ]-----------------------------------------------------------------#

exit_func(){
    # Generic output function, show the message given,
    # and then exits with the given code.

    # Parse message and exit code
    EXITCODE=$(echo "$@" | awk '{print $NF}')
    EXITMESSAGE=$(echo "$@" | awk '{ $NF = ""; print $0}')
    echo -e "\n$EXITMESSAGE"
    exit "$EXITCODE"
}

usage(){
    # Concatenate Usage Message with the error message
    # and send it to exit_func
    USAGE=""
    USAGE="${USAGE}Usage: ${SCRIPTNAME} [options]\n"
    USAGE="${USAGE}Options:\n"
    USAGE="${USAGE}\t-h, --host\t\thost to be used as reference for ssl check\n"
    USAGE="${USAGE}\t--help\t\t\tshow this help message\n"
    USAGE="${USAGE}Example:\n\t${SCRIPTNAME} --host sub.mydomain.com\n"
    exit_func "$*\r\n\n${USAGE} 1"
}

cert_renewal(){
    # Receive host to varify certificate expiration
    # And copy file from Nginx Proxy Manager container
    # to Home Assistant container

    HOME_ASSISTANT_CONTAINER_CONFIG_PATH='/config'
    NGINX_PROXY_MANAGER_CONTAINER_CERT_PATH='/etc/letsencrypt/archive/npm-7'

    CURRENT_DATE=$(date +%s)

    CERT_EXPIRATION_DATE=$(echo -n Q | \
        openssl s_client -servername "${HOST}" -connect "${HOST}":443 2>/dev/null | \
        openssl x509 -noout -dates 2>/dev/null | \
        grep notAfter | \
        awk -F= '{ print $2 }' | \
        { read -r human_date ; if [[ $human_date ]] ; then date -d "$human_date" +%s ; else echo "invalid host" ; fi ; })

    RE='^[0-9]+$'
    if ! [[ "${CERT_EXPIRATION_DATE}" =~ $RE ]] ; then
        usage "$CERT_EXPIRATION_DATE"
    fi

    if [[ ${CURRENT_DATE} -gt ${CERT_EXPIRATION_DATE} ]]; then
        HOME_ASSISTANT_CONTAINER=$(docker ps | \
            grep home-assistant  | \
            awk '{ print $1 }')

        NGINX_PROXY_MANAGER_CONTAINER=$(docker ps | \
            grep nginx-proxy-manager | \
            awk '{ print $1 }')

        NEWEST_FILES=$(docker exec "${NGINX_PROXY_MANAGER_CONTAINER}" ls -lart "${NGINX_PROXY_MANAGER_CONTAINER_CERT_PATH}" | \
            grep '\(fullchain\|privkey\)[0-9]\{1,\}' | \
            tail -2 | \
            awk '{ print $NF }')

        for i in ${NEWEST_FILES[@]}; do
            DEST_FILE=$(echo $i | sed 's/[0-9]\{1,\}//')
            docker cp --quiet "${NGINX_PROXY_MANAGER_CONTAINER}:${NGINX_PROXY_MANAGER_CONTAINER_CERT_PATH}/${i}" .
            docker cp --quiet "${i}" "${HOME_ASSISTANT_CONTAINER}:${HOME_ASSISTANT_CONTAINER_CONFIG_PATH}/${DEST_FILE}"
        done
    fi

}

#[ Dealing with commandline options ]------------------------------------------#

[[ $# -eq 0 ]] && usage "no arguments given"

OPT=$(getopt --options h: --long help,host: --name "${SCRIPTNAME}" -- "$@" 2>&1)
if [ $? != 0 ] ; then
    GETOPT_ERROR=$(echo "${OPT}" | tr -d '\n') 
    usage "${GETOPT_ERROR}"
fi

eval set -- "$OPT"

while true; do
    case "$1" in
        -h | --host) HOST=$2 ; shift 2 ;;
        --help) HELP=true ; shift ;;
        --) shift; break ;;
        *) usage "invalid arguments given" ;;
    esac
done
if [[ "${HOST}" ]] && [[ "${HELP}" ]]; then
    usage "--help and [-h|--host] parameters not allowed at same time"
elif [[ "${HELP}" ]]; then
    usage "help requested"
fi

cert_renewal